static:静态变量保存在方法区域当中。
1.修饰一个成员变量/属性。
  （1）static创建的静态变量和类相关，和对象无关；不论这个类存在多少个对象，静态变量成员变量只存在一份，可称为类属性；
  （2）被static所修饰的变量，所有类共享。且不属于对象，访问方式为：类名 . 属性。
2.修饰方法
  （1）普通的方法必须结合对象去使用；
  （2）static修饰方法：方法和类相关，和具体对象无关；
  （3）静态方法属于类，而不属于类的对象。
  （4）可以直接调用静态方法，而无需创建类的实例。
  （5）静态方法可以访问静态数据成员，并可以更改静态数据成员的值。
  （6）静态方法中不能使用this；
  注意事项1:
  静态方法和实例无关, 而是和类相关. 因此这导致了两个情况:
  （1）静态方法不能直接使用非静态数据成员或调用非静态方法(非静态数据成员和方法都是和实例相关的).
  （2）this和super两个关键字不能在静态上下文中使用(this 是当前实例的引用, super是当前实例父类实例的引用, 也是和当前实例相关).
  注意事项2：
  （1）我们曾经写的方法为了简单, 都统一加上了static. 但实际上一个方法具体要不要带 static, 都需要是情形而定.
  （2）main 方法为 static 方法.
3.修饰代码块：即静态代码块；
  只能初始化静态成员；
  对于静态成员变量：在普通方法中能访问，在静态方法也能访问；静态代码块/普通代码块中访问；
  对于普通成员变量：普通方法能访问，静态方法不能访问；普通代码块能访问；静态代码块不能访问；
  注意事项：
  （1）静态代码块不管new多少个对象，其只会执行一次，且是最先执行的。
  （2）静态代码块执行完毕后, 实例代码块（构造块）执行，再然后是构造函数执行。
4.修饰类
5.JVM内存分成若干个区域：
  JVM栈：局部变量、引用
  堆：new出来的对象
  方法区：保存静态变量